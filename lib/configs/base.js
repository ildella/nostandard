const js = require('@eslint/js')
const globals = require('globals')
/* from NeoStandard, yet to be evaluated. */
// const eslintPluginImportX = require('eslint-plugin-import-x')
// @ts-ignore
// const eslintPluginPromise = require('eslint-plugin-promise')

module.exports = {
  name: 'nostandard/base',

  languageOptions: {
    // ecmaVersion: 2024, // defaults to latest
    // sourceType: 'module',
    globals: {
      ...globals.es2024,
      ...globals.node,
      document: 'readonly',
      navigator: 'readonly',
      window: 'readonly',
    },
    parserOptions: {
      // ecmaVersion: 2024, // default: latest
      ecmaFeatures: {
        impliedStrict: true,
        globalReturn: false,
        jsx: false,
      },
    },
  },

  /* from ildella/core: yet to be reconsidered */
  // plugins: {
  // security: eslintPluginSecurity,
  // promise: eslintPluginPromise,
  // },

  rules: {
    /* originals from ildella/core */
    ...js.configs.recommended.rules,
    'arrow-body-style': ['warn', 'as-needed'],
    'block-scoped-var': 'warn',
    'camelcase': 'warn',
    'complexity': ['warn', 5],
    'default-param-last': 'warn',
    'max-lines': ['warn', 200],
    'max-lines-per-function': ['warn', 60],
    'max-statements': ['warn', 15],
    'max-nested-callbacks': ['warn', 3],
    'no-console': 'off',
    'no-await-in-loop': 'warn',
    'no-empty-function': 'warn',
    'no-implicit-globals': 'warn',
    // neo: 'no-labels': ['error', { allowLoop: false, allowSwitch: false }],
    'no-labels': 'warn',
    'no-lone-blocks': 'warn',
    'no-loop-func': 'warn',
    'no-lonely-if': 'warn',
    'no-multi-assign': 'warn',
    'no-multi-str': 'warn',
    'no-nested-ternary': 'warn',
    // neo: 'no-unneeded-ternary': ['error', { defaultAssignment: false }],
    'no-unneeded-ternary': 'warn',
    'no-dupe-else-if': 'warn',
    'no-else-return': 'warn',
    'no-new': 'warn',
    'no-new-func': 'warn',
    'no-new-wrappers': 'warn',
    'no-object-constructor': 'warn',
    'no-octal-escape': 'error',
    'no-param-reassign': 'warn',
    'no-proto': 'warn',
    'no-restricted-properties': 'warn',
    // neo: 'no-return-assign': ['error', 'except-parens'],
    'no-return-assign': ['warn', 'except-parens'],
    'no-throw-literal': 'warn',
    'no-undef': 'error',
    'no-undefined': 'error',
    // neo: 'no-unused-vars': ['warn', {
    //   args: 'none',
    //   caughtErrors: 'none',
    //   ignoreRestSiblings: true,
    //   vars: 'all',
    // }],
    'no-unused-vars': 'warn',
    'no-use-before-define': 'error',
    'no-useless-call': 'error',
    'no-useless-concat': 'warn',
    'no-useless-constructor': 'error',
    'no-useless-rename': 'warn',
    'no-var': 'warn',
    'no-with': 'warn',
    'object-shorthand': ['warn', 'properties'],
    'prefer-arrow-callback': 'warn',
    'prefer-const': 'warn',
    // 'neo: prefer-const': ['error', { destructuring: 'all' }],
    'prefer-numeric-literals': 'warn',
    'prefer-object-spread': 'off',
    'prefer-rest-params': 'warn',
    'prefer-spread': 'warn',
    'require-await': 'warn',

    /* new from neostandard */
    'dot-notation': ['warn', {allowKeywords: true}],

    /* new from neostandard - forced to warn - yet to be evaluated. */
    'accessor-pairs': ['warn', {setWithoutGet: true, enforceForClassMembers: true}],
    'array-callback-return': ['warn', {
      allowImplicit: false,
      checkForEach: false,
    }],
    'constructor-super': 'warn',
    'default-case-last': 'warn',
    'eqeqeq': ['warn', 'always', {null: 'ignore'}],
    'new-cap': ['warn', {newIsCap: true, capIsNew: false, properties: true}],
    'no-array-constructor': 'warn',
    'no-async-promise-executor': 'warn',
    'no-caller': 'warn',
    'no-case-declarations': 'warn',
    'no-class-assign': 'warn',
    'no-compare-neg-zero': 'warn',
    'no-cond-assign': 'warn',
    'no-const-assign': 'warn',
    'no-constant-condition': ['warn', {checkLoops: false}],
    'no-control-regex': 'warn',
    'no-debugger': 'warn',
    'no-delete-var': 'warn',
    'no-dupe-args': 'warn',
    'no-dupe-class-members': 'warn',
    'no-dupe-keys': 'warn',
    'no-duplicate-case': 'warn',
    'no-useless-backreference': 'warn',
    'no-empty': ['warn', {allowEmptyCatch: true}],
    'no-empty-character-class': 'warn',
    'no-empty-pattern': 'warn',
    'no-eval': 'warn',
    'no-ex-assign': 'warn',
    'no-extend-native': 'warn',
    'no-extra-bind': 'warn',
    'no-extra-boolean-cast': 'warn',
    'no-fallthrough': 'warn',
    'no-func-assign': 'warn',
    'no-global-assign': 'warn',
    'no-implied-eval': 'warn',
    'no-import-assign': 'warn',
    'no-invalid-regexp': 'warn',
    'no-irregular-whitespace': 'warn',
    'no-iterator': 'warn',
    'no-loss-of-precision': 'warn',
    'no-misleading-character-class': 'warn',
    'no-prototype-builtins': 'warn',
    'no-useless-catch': 'warn',
    'no-new-native-nonconstructor': 'warn',
    'no-obj-calls': 'warn',
    'no-octal': 'warn',
    'no-redeclare': ['warn', {builtinGlobals: false}],
    'no-regex-spaces': 'warn',
    'no-self-assign': ['warn', {props: true}],
    'no-self-compare': 'warn',
    'no-sequences': 'warn',
    'no-shadow-restricted-names': 'warn',
    'no-sparse-arrays': 'warn',
    'no-template-curly-in-string': 'warn',
    'no-this-before-super': 'warn',
    'no-undef-init': 'warn',
    'no-unexpected-multiline': 'warn',
    'no-unmodified-loop-condition': 'warn',
    'no-unreachable': 'warn',
    'no-unreachable-loop': 'warn',
    'no-unsafe-finally': 'warn',
    'no-unsafe-negation': 'warn',
    'no-unused-expressions': ['warn', {
      allowShortCircuit: true,
      allowTernary: true,
      allowTaggedTemplates: true,
    }],
    'no-useless-computed-key': 'warn',
    'no-useless-escape': 'warn',
    'no-useless-return': 'warn',
    'no-void': 'warn',
    'one-var': ['warn', {initialized: 'never'}],
    'prefer-promise-reject-errors': 'warn',
    'prefer-regex-literals': ['warn', {disallowRedundantWrapping: true}],
    'symbol-description': 'warn',
    'unicode-bom': ['warn', 'never'],
    'use-isnan': ['warn', {
      enforceForSwitchCase: true,
      enforceForIndexOf: true,
    }],
    'valid-typeof': ['warn', {requireStringLiterals: true}],
    'yoda': ['warn', 'never'],
  },
}
